/* eslint-disable  func-names */
/* eslint-disable  no-console */

const Alexa = require('ask-sdk-core');
const axios = require('axios');
const phonemes = require('phonemedictionary.json');

//To deploy the skill, provide a tokens file containing the token JSON 
//generated by the Resources/tokengenerator.sh shell script.
const tokens = require('private/tokens.json');

//API URIs
const baseApiUri = 'https://owner-api.teslamotors.com';
const getVehiclesUri = '/api/1/vehicles';

const userAgent = 'Nikola Skill/1.0-alpha'
const fallbackSpeechText = 'I don\'t have an answer for that yet';
const errorSpeechText = 'Uh oh! Something went wrong. I logged the error and will work on it tonight.';

const axiosClient = axios.create({
    baseURL: baseApiUri,
    timeout: 5000,
    headers: {
        'User-Agent': userAgent,
        'Authorization': 'Bearer ' + tokens.access_token
    }
});

const LaunchRequestHandler = {
  canHandle(handlerInput) {
    return handlerInput.requestEnvelope.request.type === 'LaunchRequest';
  },
  async handle(handlerInput) {
    console.log('LaunchRequestHandler' + JSON.stringify(handlerInput.requestEnvelope));
    var speechText = fallbackSpeechText;
    var displayText = fallbackSpeechText;
    const sessionAttributes = handlerInput.attributesManager.getSessionAttributes();
    var skillResponse = null;

    try
    {
        var carAttributes = await getFirstCarAttributes();

        if(carAttributes != null)
        {
            //Persist data to session
            sessionAttributes.currentTeslaId = carAttributes.currentTeslaId;
            sessionAttributes.currentTeslaName = carAttributes.currentTeslaName;
            sessionAttributes.currentTeslaState = carAttributes.currentTeslaState;
            sessionAttributes.currentTeslaNamePhoneme = carAttributes.currentTeslaNamePhoneme;
            handlerInput.attributesManager.setSessionAttributes(sessionAttributes);

            speechText = `Looks like ${sessionAttributes.currentTeslaNamePhoneme} is ${sessionAttributes.currentTeslaState}.`;
            displayText = `Looks like ${sessionAttributes.currentTeslaName} is ${sessionAttributes.currentTeslaState}.`;

            if(isCarAvailable(sessionAttributes.currentTeslaState))
            {
                sessionAttributes.nextCommand = 'getChargeStatus';
                speechText += ` Do you want to know ${sessionAttributes.currentTeslaNamePhoneme} charge status?`;
                displayText += ` Do you want to know ${sessionAttributes.currentTeslaName} charge status?`;
            }
            else
            {
                sessionAttributes.nextCommand = 'wake';
                speechText += ` Do you want me to try waking up ${sessionAttributes.currentTeslaNamePhoneme}?`;
                displayText += ` Do you want me to try waking up ${sessionAttributes.currentTeslaName}?`;
            }

            skillResponse =  handlerInput.responseBuilder
                .speak(speechText)
                .withSimpleCard(sessionAttributes.currentTeslaName, displayText)
                .withShouldEndSession(false)
                .getResponse();
        }
        else
        {
            if(carAttributes == null)
            {
                speechText = 'Looks like you don\'t own any Tesla vehicles. Goodbye!';

                skillResponse =  handlerInput.responseBuilder
                    .speak(speechText)
                    .withShouldEndSession(true)
                    .getResponse();
            }
        }
    }
    catch(error)
    {
        console.log ('GetVehicles error: ' + error);
        console.log ('GetVehicles request: ' + error.request);

        speechText = errorSpeechText;
        skillResponse = handlerInput.responseBuilder
            .speak(speechText)
            .withSimpleCard('Oops!', speechText)
            .getResponse();
    }
    finally
    {
        console.log('Response: ' + JSON.stringify(skillResponse));
        return skillResponse;
    }
  },
};

const YesIntentHandler = {
    canHandle(handlerInput) {
      return handlerInput.requestEnvelope.request.type === 'IntentRequest'
        && handlerInput.requestEnvelope.request.intent.name === 'AMAZON.YesIntent';
    },
    async handle(handlerInput) {
        console.log('YesIntentHandler' + JSON.stringify(handlerInput.requestEnvelope));
        var speechText = fallbackSpeechText;
        const sessionAttributes = handlerInput.attributesManager.getSessionAttributes();
        var skillResponse = null;

        if(sessionAttributes.nextCommand == 'getChargeStatus')
        {
            skillResponse = await getChargeStateResponse(handlerInput, true);
        }
        else if(sessionAttributes.nextCommand == 'wake')
        {
            skillResponse = await wakeCar(handlerInput);
        }

        console.log('Response: ' + JSON.stringify(skillResponse));
        return skillResponse;
    },
};

const HonkIntentHandler = {
    canHandle(handlerInput) {
      return handlerInput.requestEnvelope.request.type === 'IntentRequest'
        && handlerInput.requestEnvelope.request.intent.name === 'HonkIntent';
    },
    async handle(handlerInput) {
        console.log('HonkIntentHandler' + JSON.stringify(handlerInput.requestEnvelope));
        var skillResponse = await honkHorn(handlerInput);
        console.log('Response: ' + JSON.stringify(skillResponse));
        return skillResponse;
    },
};


const ChargeStatusIntentHandler = {
    canHandle(handlerInput) {
        return handlerInput.requestEnvelope.request.type === 'IntentRequest'
        && handlerInput.requestEnvelope.request.intent.name === 'ChargeStatusIntent';
    },
    handle(handlerInput) {
        axiosClient.get(getVehiclesUri)
            .then(response => {
                console.log('ChargeStatusIntentHandler response');
                console.log(response);
            })
            .catch(error => {
                console.log('ChargeStatusIntentHandler error');
                console.log (error);
            });

        const speechText = 'I don\'t have an answer for that just yet';

        return handlerInput.responseBuilder
            .speak(speechText)
            .withSimpleCard('I don\'t have an answer for that just yet', speechText)
            .getResponse();
    },
};

const HelpIntentHandler = {
  canHandle(handlerInput) {
    return handlerInput.requestEnvelope.request.type === 'IntentRequest'
      && handlerInput.requestEnvelope.request.intent.name === 'AMAZON.HelpIntent';
  },
  handle(handlerInput) {
    const speechText = 'You can say hello to me!';

    return handlerInput.responseBuilder
      .speak(speechText)
      .reprompt(speechText)
      .withSimpleCard('Hello World', speechText)
      .getResponse();
  },
};

const CancelAndStopIntentHandler = {
  canHandle(handlerInput) {
    return handlerInput.requestEnvelope.request.type === 'IntentRequest'
      && (handlerInput.requestEnvelope.request.intent.name === 'AMAZON.CancelIntent'
        || handlerInput.requestEnvelope.request.intent.name === 'AMAZON.StopIntent');
  },
  handle(handlerInput) {
    const speechText = 'Goodbye!';

    return handlerInput.responseBuilder
      .speak(speechText)
      .withSimpleCard('Goodbye!', speechText)
      .getResponse();
  },
};

const SessionEndedRequestHandler = {
  canHandle(handlerInput) {
    return handlerInput.requestEnvelope.request.type === 'SessionEndedRequest';
  },
  handle(handlerInput) {
    console.log(`Session ended with reason: ${handlerInput.requestEnvelope.request.reason}`);

    return handlerInput.responseBuilder.getResponse();
  },
};

const ErrorHandler = {
  canHandle() {
    return true;
  },
  handle(handlerInput, error) {
    console.log(`Error handled: ${error.message}`);

    return handlerInput.responseBuilder
      .speak('Sorry, I can\'t understand the command. Please say again.')
      .reprompt('Sorry, I can\'t understand the command. Please say again.')
      .getResponse();
  },
};

async function getFirstCarAttributes()
{
    var carAttributes = null;

    try
    {
        var response = await axiosClient.get(getVehiclesUri);
        console.log('GetVehicles response ' + JSON.stringify(response.data));

        if(response.data.count == 0)
        {
            console.log('No Tesla vehicles owned.');
            return carAttributes;
        }

        console.log(response.data.count + ' Tesla vehicles owned.');
        var firstVehicle = response.data.response[0];

        //Set up car attributes
        carAttributes = new Object();
        carAttributes.currentTeslaId = firstVehicle.id;
        carAttributes.currentTeslaName = firstVehicle.display_name;
        carAttributes.currentTeslaState = firstVehicle.state;
        carAttributes.currentTeslaNamePhoneme = getPhoneme(carAttributes.currentTeslaName);
    }
    catch(error)
    {
        logErrorInformation('getFirstVehicleProperties', error);
    }
    finally
    {
        return carAttributes;
    }
}

async function getChargeStateResponse(handlerInput, clearNextCommand)
{
    var skillResponse = null;
    const sessionAttributes = handlerInput.attributesManager.getSessionAttributes();
    var id = sessionAttributes.currentTeslaId;
    const chargeStateUri = `/api/1/vehicles/${id}/data_request/charge_state`;
    var speechText = errorSpeechText;
    var displayText = errorSpeechText;

    try
    {
        var response = await axiosClient.get(chargeStateUri);
        console.log('ChargeState response ' + JSON.stringify(response.data));
        var chargeResponse = response.data.response;

        //Persist session attributes
        sessionAttributes.battery_range = chargeResponse.battery_range;
        sessionAttributes.charging_state = chargeResponse.charging_state;
        if(clearNextCommand)
        {
            sessionAttributes.nextCommand = null;
        }
        handlerInput.attributesManager.setSessionAttributes(sessionAttributes);
        
        speechText = `${sessionAttributes.currentTeslaNamePhoneme} has a range of ` + 
        `${sessionAttributes.battery_range} miles. Current charge state is ${sessionAttributes.charging_state}`;

        displayText = `${sessionAttributes.currentTeslaName} has a range of ` + 
        `${sessionAttributes.battery_range} miles. Current charge state is ${sessionAttributes.charging_state}`;        

        return  handlerInput.responseBuilder
            .speak(speechText)
            .withSimpleCard(sessionAttributes.currentTeslaName, displayText)
            .getResponse();
    }
    catch(error)
    {
        console.log ('ChargeState error: ' + error);
        console.log ('ChargeState request: ' + JSON.stringify(error.request));

        speechText = errorSpeechText;
        return handlerInput.responseBuilder
            .speak(speechText)
            .withSimpleCard('Oops!', speechText)
            .getResponse();
    }
}

async function wakeCar(handlerInput)
{
    var skillResponse = null;
    const sessionAttributes = handlerInput.attributesManager.getSessionAttributes();
    var id = sessionAttributes.currentTeslaId;
    const wakeUri = `/api/1/vehicles/${id}/wake_up`;
    var speechText = errorSpeechText;
    var displayText = errorSpeechText;

    try
    {
        var response = await axiosClient.post(wakeUri);
        console.log('Wake response ' + JSON.stringify(response.data));
        var wakeResponse = response.data.response;

        //Persist session attributes
        sessionAttributes.currentTeslaId = wakeResponse.id;
        sessionAttributes.currentTeslaName = wakeResponse.display_name;
        sessionAttributes.currentTeslaNamePhoneme = getPhoneme(sessionAttributes.currentTeslaName);
        sessionAttributes.currentTeslaState = wakeResponse.state;
        sessionAttributes.nextCommand = 'chargeStatus';
        handlerInput.attributesManager.setSessionAttributes(sessionAttributes);
        
        if(isCarAvailable(sessionAttributes.currentTeslaState))
        {
            speechText = `${sessionAttributes.currentTeslaNamePhoneme} is now ${sessionAttributes.currentTeslaState}.` +
                            ` Did you want me to get the charging status?`;

            displayText = `${sessionAttributes.currentTeslaName} is now ${sessionAttributes.currentTeslaState}.` +
            ` Did you want me to get the charging status?`;

            return handlerInput.responseBuilder
            .speak(speechText)
            .withSimpleCard(sessionAttributes.currentTeslaName, displayText)
            .withShouldEndSession(false)
            .getResponse();
        }
        else
        {
            speechText = `${sessionAttributes.currentTeslaNamePhoneme} is still waking up.` + 
                            ` Ask me about it again in about 30 seconds.`

            displayText = `${sessionAttributes.currentTeslaName} is still waking up.` + 
            ` Ask me about it again in about 30 seconds.`

            return handlerInput.responseBuilder
            .speak(speechText)
            .withSimpleCard(sessionAttributes.currentTeslaName, displayText)
            .getResponse();
        }
    }
    catch(error)
    {
        logErrorInformation('wakeCar', error);

        speechText = errorSpeechText;
        return handlerInput.responseBuilder
            .speak(speechText)
            .withSimpleCard('Oops!', speechText)
            .getResponse();
    }
}

async function honkHorn(handlerInput)
{
    var skillResponse = null;
    const sessionAttributes = handlerInput.attributesManager.getSessionAttributes();
    var id = sessionAttributes.currentTeslaId;
    const honkUri = `/api/1/vehicles/${id}/command/honk_horn`;
    var speechText = errorSpeechText;
    var displayText = errorSpeechText;

    try
    {
        var response = await axiosClient.post(honkUri);
        console.log('Honk response ' + JSON.stringify(response.data));
        var honkResponse = response.data;

        speechText = `I am trying to honk ${sessionAttributes.currentTeslaNamePhoneme}'s horn.`;
        displayText = `I am trying to honk ${sessionAttributes.currentTeslaName}'s horn.`;

        return handlerInput.responseBuilder
            .speak(speechText)
            .withSimpleCard(sessionAttributes.currentTeslaName, displayText)
            .withShouldEndSession(false)
            .getResponse();
    }
    catch(error)
    {
        logErrorInformation('hokeHorn', error);

        speechText = errorSpeechText;
        return handlerInput.responseBuilder
            .speak(speechText)
            .withSimpleCard('Oops!', speechText)
            .getResponse();
    }
}

function logErrorInformation(name, error)
{
    console.log (`${name} error: ` + error);
    if (error.response) {
        // The request was made and the server responded with a status code
        // that falls out of the range of 2xx
        console.log(error.response.data);
        console.log(error.response.status);
        console.log(error.response.headers);
    } else if (error.request) {
        // The request was made but no response was received
        // `error.request` is an instance of XMLHttpRequest in the browser and an instance of
        // http.ClientRequest in node.js
        console.log(error.request);
    } else {
        // Something happened in setting up the request that triggered an Error
        console.log('Error', error.message);
    }

    console.log(error.config);
}

function getPhoneme(currentTeslaName)
{
    if(phonemes[currentTeslaName.toLowerCase()] != undefined
        && phonemes[currentTeslaName.toLowerCase()] != null)
    {
        var phoneme = phonemes[currentTeslaName.toLowerCase()];
        return `<phoneme alphabet="ipa" ph="${phoneme}">${currentTeslaName}</phoneme>`;
    }
    else
    {
        return currentTeslaName;
    }
}

function isCarAvailable(currentState)
{
    if(currentState != undefined
    && currentState != null
    && currentState != 'asleep'
    && currentState != 'offline')
    {
        return true;
    }
    else
    {
        return false;
    }
}

const skillBuilder = Alexa.SkillBuilders.custom();

exports.handler = skillBuilder
  .addRequestHandlers(
    LaunchRequestHandler,
    YesIntentHandler,
    ChargeStatusIntentHandler,
    HonkIntentHandler,
    HelpIntentHandler,
    CancelAndStopIntentHandler,
    SessionEndedRequestHandler
  )
  .addErrorHandlers(ErrorHandler)
  .lambda();
